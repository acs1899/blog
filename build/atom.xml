<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>wulfovitch.net</title>
 <link href="http://wulfovitch.net/atom.xml" rel="self"/>
 <link href="http://wulfovitch.net/"/>
 <updated>2013-11-15T22:38:13+08:00</updated>
 <id>http://wulfovitch.net/</id>
 <author>
   <name>Wolfgang König</name>
 </author>
 
 
 <entry>
   <title>git quick start</title>
   <link href="http://wulfovitch.net/2013/11/git-quick-start/"/>
   <updated>2013-11-15T00:00:00+08:00</updated>
   <id>http://wulfovitch.net/2013/11/git-quick-start</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;主要讲从安装到使用git，针对windows使用命令行模式（git虽然提供可视化操作界面但功能不全）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h3&gt;安装&lt;/h3&gt;

&lt;p&gt;windows下安装参考群里的&lt;strong&gt;&lt;em&gt;github小项目共同开发超简易图文教程.pdf&lt;/em&gt;&lt;/strong&gt;里的安装部分&lt;/p&gt;

&lt;p&gt;这里不多废话了。&lt;/p&gt;

&lt;p&gt;安装好后，在cmd（命令行界面）里面敲一下git version看看是否安装成功，如果出现诸如command not found之类的说明安装不正确&lt;/p&gt;

&lt;h3&gt;ssh 公钥&lt;/h3&gt;

&lt;p&gt;想要往服务器上提交代码，必须要本机有一份私钥，服务器上有一份公钥（配对的）。 要在你的本机生成一对公钥和私钥，然后将公钥交给
管理员，私钥不动，这样才可以提交代码。&lt;/p&gt;

&lt;h4&gt;生成方法&lt;/h4&gt;

&lt;p&gt;在cmd中打 ssh-keygen，（windows下git安装好后应该会有这个命令），打完命令后按3次回车就OK。然后在&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#1.注意将username改成你自己机器的名字&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#2. .ssh文件夹可能为隐藏文件夹，需要先设置（妈的windows无比蛋疼）&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:\&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Documents&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;文件下，有rsa和rsa.pub文件，rsa为私钥，不用管，rsa.pub为公钥，将这个文件发送给管理员即可&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;我没有实验过，所以在ssh-keygen的时候最好看一下输出的信息，应该会有钥匙生成的位置什么的&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;使用git&lt;/h3&gt;

&lt;h4&gt;初始化及获取项目代码&lt;/h4&gt;

&lt;p&gt;一切配置好之后，就可以部署代码了&lt;/p&gt;

&lt;p&gt;在命令行里执行以下操作&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#cd到你的项目目录下，如cd D:\wamp\www\snspay\&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$YOUR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PROJECT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DIRECTORY&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;228&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;209&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snspay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不出意外的话，执行完上述操作，在本地就会自动有一份项目代码了。&lt;/p&gt;

&lt;h4&gt;提交更改&lt;/h4&gt;

&lt;p&gt;开发完或修复完BUG之后，执行以下命令&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# 注意这里的命令也要在项目的根目录里执行&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;这里随便写你这次干了哪些事情&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;OK，代码已经提交到测试环境上了，用http://develope.snspay.com可以查看到你的变更.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;不要在项目里面放没有用的文件，因为在提交时会连这些没用的文件一起提交&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;给前端的一些tips&lt;/h3&gt;

&lt;p&gt;前端可能需要不断的提交代码来看效果，明显用上述方法会显得很麻烦。&lt;/p&gt;

&lt;p&gt;可以参考[这篇][tips]（还没写）文章来看如何在本地搭一个snspay的开发环境。&lt;/p&gt;

&lt;p&gt;善用google chrome 的 F12工具，在chrome浏览器中按下F12，可以查看网页HTML代码，CSS文件，JS文件等。&lt;/p&gt;

&lt;p&gt;并且可以手动修改这些CSS和HTML，修改效果会马上呈现在页面中，还可以直接执行javascript代码，环境与“当前环境”相同。&lt;/p&gt;

&lt;p&gt;遇到问题先思考，思考不下来再谷歌，谷歌不下来去提问（社区最好）。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>如何搭建一个自动部署的git server</title>
   <link href="http://wulfovitch.net/2013/11/build-git-server/"/>
   <updated>2013-11-12T00:00:00+08:00</updated>
   <id>http://wulfovitch.net/2013/11/build-git-server</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;该文介绍如何在centos下用gitosis搭建一个带自动部署功能的git server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h3&gt;安装&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;git &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;yum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;python setup tools&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;yum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setuptools&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;gitosis&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res0nat0r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gitosis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gitosis&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;  
 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3&gt;配置&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;首先建立一个git用户，专门用来管理git仓库&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;useradd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;准备一份公钥（ssh public key）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;gitosis的初始化需要一份公钥，对应用户即为git repo的管理员。这里管理员对git repo的控制，实际上也是通过控制一个gitosis-admin.git来控制成员和其他repo的，admin-repo中有一份配置文档和一个keydir，keydir里面存放成员的公钥，后面会cover这一点。&lt;/p&gt;

&lt;p&gt;现在处于方便，直接将本机用root账户作为repo的管理员，切到root下&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keygen&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 三次回车&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.ssh/i&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_rsa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;公钥生成了，即~/.ssh/id_rsa.pub&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;初始化gitosis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要先切到git用户下再进行初始化&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;su&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gitosis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.ssh/i&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d_rsa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pub&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;755&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gitosis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样在git的HOME文件夹中会出现repositories目录，即仓库目录，目录中有一个gitosis-admin.git目录，即上文提到的。
现在本机root账户拥有这个仓库的读写权限。&lt;/p&gt;

&lt;p&gt;这里最后一行权限修改很重要，如果不修改则配置不会生效。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;增加成员和仓库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;用本机root身份将gitosis-admin.git pull下来&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@hostname_or_ipaddr&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gitosis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 注意这里只有一个 : 和一个 / &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一切顺利的话管理仓库应该会被pull下来的
编辑gitosis.conf&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gitosis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#group代表一个组，gitosis-admin为组名&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;writable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gitosis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#writable的值为该组的成员可以写的仓库名&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;members&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;louis&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@laptop&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#members代表组员，多个组员用空格分割，组员名用username@host的格式&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;该配置的意思就是gitosis-admin这个组中有一个 louis@laptop成员，并且该组的成员对 gitosis-admin这个repo可写
因为这里组名和repo名一样，所以要注意区分，这两个是完全不同的&lt;/p&gt;

&lt;p&gt;增加仓库&lt;/p&gt;

&lt;p&gt;仓库不用手动创建，只要在配置文档中某成员对某个名称的仓库（该仓库可能还不存在！）可写，那么当该成员向这个远程仓库push的时候，gitosis会自动在/home/git/repositories下创建仓库对应的目录the_repo.git。&lt;/p&gt;

&lt;p&gt;增加成员&lt;/p&gt;

&lt;p&gt;如上文说的，增加成员直接在members中写出成员名字就行了，然后需要该成员把自己的公钥复制到keydir中，以 成员名.pub 的格式命名。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;以上这些配置必须要push之后才能生效！&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;代码自动部署&lt;/h3&gt;

&lt;p&gt;这里用一个git的post-update HOOK就能完成&lt;/p&gt;

&lt;p&gt;假设现在需要将web仓库提交来的代码自动部署到/var/www/html/目录下&lt;/p&gt;

&lt;p&gt;首先需要将/var/www/html加入版本控制，并切将远程仓库设置为 web.git&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#hooks文件夹下存储了各种钩子的实例文件&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#如果要添加post-update钩子，则将post-update.sample后面的.sample去掉即可，当用户提交后，git会自动在hooks目录下寻找名为post-update的文件，若找到则执行其中代码&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/home/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hooks&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#创建post-update文件&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vim&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在psot-update中加入以下代码&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;DEPLOY_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/var/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;unset&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GIT_DIR&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#!important 如果不使用这句，是无法改变下面git pull的执行环境的&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$DEPLOY_DIR&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pull&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样当每次push之后，git都会自动在/var/www/html下自动执行一次git pull origin master，这样就实现了自动部署代码的功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;这里要注意所有文件目录的权限问题，要确保git用户拥有读写权限&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>zabbix与外部监控脚本整合方案</title>
   <link href="http://wulfovitch.net/2013/10/zabbix-works-with-external-scripts/"/>
   <updated>2013-10-16T19:27:33+08:00</updated>
   <id>http://wulfovitch.net/2013/10/zabbix-works-with-external-scripts</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;自写的外部监控脚本可能需要单独处理报警触发条件，结果展现等问题。而触发条件可能遇到很复杂的情况，zabbix对于这类问题是一个很不错的方案，而且zabbix完全支持外部数据处理。本文介绍一个将zabbix和外部监控脚本整合的方案。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h3&gt;场景例子&lt;/h3&gt;

&lt;p&gt;UrlWatch是一个python脚本，监控部分url的状态，包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code 返回代码&lt;/li&gt;
&lt;li&gt;span 执行时间&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在的需求是用zabbix来搜集code和span数据，然后决策是否发出报警，画统计图。&lt;/p&gt;

&lt;h3&gt;实现&lt;/h3&gt;

&lt;h4&gt;整体思路&lt;/h4&gt;

&lt;p&gt;外部脚本在一个 &lt;strong&gt;&lt;em&gt;source&lt;/em&gt;&lt;/strong&gt; 文件上打日志，日志格式是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;service  item[params]=value  item[params]=value ...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;service是服务，item是监控项，params是额外的参数，value是对应值&lt;/p&gt;

&lt;p&gt;对应到UrlWatch的例子：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;urlwatch&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baidu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baidu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;urlwatch&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sina&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;302&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;www&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sina&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.00001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后一个pnp(pull n push)守护程序去监控这个 &lt;strong&gt;&lt;em&gt;source&lt;/em&gt;&lt;/strong&gt; 文件的新添加的内容（类似tail -F），
一旦检测到新内容后，读取并进行PARSE，然后与一个 &lt;strong&gt;&lt;em&gt;discovery&lt;/em&gt;&lt;/strong&gt; 文件内容做对比，
&lt;strong&gt;&lt;em&gt;discovery&lt;/em&gt;&lt;/strong&gt; 文件保存的是discovery需要使用的JSON格式数据（见后文），如果service和item组合
不存在于discovery文件中，则以固定格式写进discovery文件。 之后调用zabbix_sender将结果发送给
server端，实现zabbix搜集数据。
server端的discovery跑一个自定义的key（后文），key对应的程序拉取discovery文件的JSON数据稍微组合后返回给zabbix，实现基于source中的
service和item自动创建zabbix的item、trigger、graph等。
实现结构大致如下图：
&lt;img src=&quot;/images/post/zabbix-workds-with-external-script/4.png&quot; alt=&quot;arch&quot;&gt;&lt;/p&gt;

&lt;h4&gt;discovery&lt;/h4&gt;

&lt;p&gt;在zabbix前端建立名为 &lt;strong&gt;&lt;em&gt;external&lt;/em&gt;&lt;/strong&gt; 的host，该host管理外部数据。
在host建立一个discovery。
&lt;img src=&quot;/images/post/zabbix-workds-with-external-script/1.jpg&quot; alt=&quot;discovery&quot;&gt;&lt;/p&gt;

&lt;p&gt;这里说明一下key，discovery支持自定义的发现，也就是可以用UserParameter来设定discovery的自定义key，自定义key返回固定格式的json数据，如下：
&lt;img src=&quot;/images/post/zabbix-workds-with-external-script/2.jpg&quot; alt=&quot;discovery json&quot;&gt;
当data中每多一项，则discovery就认为多发现了一项。&lt;/p&gt;

&lt;p&gt;还要注意这里key中还指定了参数，这两个参数是过滤data数组用的，也就是说从一个json数据中赛选出部分数据返回，不返回全部. Discovery本身也支持过滤，filter，可以指定macro来只返回我们关心的数据，不过经过测试只能支持单一的macro匹配。&lt;/p&gt;

&lt;p&gt;在上面这个例子，我们可以通过FSNAME来过滤内容（只返回FSNAME字段的内容匹配的项），但不能通过FSNAME 和 FSTYPE来过滤（实验结果，官方文档没做介绍），所以这里改用参数来进行过滤。由于返回数据是由自定义key来做，所以我们可以随意得根据参数来过滤内容（这部分不熟悉的可以参考zabbix UserParameter）。&lt;/p&gt;

&lt;p&gt;然后我们需要做的就是自写一个脚本作为external.discovery的执行脚本，并支持传入参数。返回的数据格式符合标准就OK。&lt;/p&gt;

&lt;h4&gt;item prototype&lt;/h4&gt;

&lt;p&gt;接下来的工作就是创建item prototype，一旦discovery发现新项，就会自动根据item样板创建实际的item，如果一个discovery下有多个item prototype，那么每发现一个新项（data数组中多一个元素），discovery就会创建多个item。trigger类似。
&lt;img src=&quot;/images/post/zabbix-workds-with-external-script/3.jpg&quot; alt=&quot;item prototype&quot;&gt;
呃，这里注意macro的使用就行了，我把所有的外部脚本的key都明明为external，从参数去区分他们。
item设置里可以使用descovery返回数据中的macro（就是data数组中每个元素的键名，注意这里宏的符号是#），type必须选择Zabbix trapper，因为要用到zabbix sender主动推送数据过来。&lt;/p&gt;

&lt;p&gt;zabbix前端暂时就这样。&lt;/p&gt;

&lt;h4&gt;script&lt;/h4&gt;

&lt;p&gt;点&lt;a href=&quot;https://github.com/louis-sherren/l2zabbix&quot;&gt;这里&lt;/a&gt;查看代码&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>杂谈</title>
   <link href="http://wulfovitch.net/2013/10/nice-things-happen/"/>
   <updated>2013-10-16T19:27:33+08:00</updated>
   <id>http://wulfovitch.net/2013/10/nice-things-happen</id>
   <content type="html">&lt;p&gt;昨天做梦遇到红得发亮的美丽的蛇，今天一大早我妈就打电话来说可以自己走路了，在网上搜了一下关于解梦的内容，说遇见红蛇预示着家人身体健康。 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;但愿解梦都很准吧&lt;/em&gt;&lt;/strong&gt;。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>如何用github pages搭建一个博客</title>
   <link href="http://wulfovitch.net/2013/09/how-to-build-git/"/>
   <updated>2013-09-29T19:27:33+08:00</updated>
   <id>http://wulfovitch.net/2013/09/how-to-build-git</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文讲述如何用github来搭建一个博客系统, 主要讲了下搭建流程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;github pages&lt;/h3&gt;

&lt;p&gt;github pages本意是快速给项目或个人创建展示性的页面, 搭建在github的服务器上, 并支持独立域名; 但是上面只能放静态站点, 但这完全
不影响我们用他来作博客, 因为他支持强大的jekyll引擎.&lt;/p&gt;

&lt;h3&gt;利弊&lt;/h3&gt;

&lt;h4&gt;好处&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;免费稳定的服务器能让我们有更多的钱去买吃的.&lt;/li&gt;
&lt;li&gt;很多现成的用github pages搭建的站点, 均是开源的, 如果喜欢某一套网站的模板, 可以悄悄地fork到其源码, 遵循一些协议就可以占为己用, 在&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;这里&lt;/a&gt;可以看到很多用github pages + jekyll开发的网站.&lt;/li&gt;
&lt;li&gt;网站可以随意定制.&lt;/li&gt;
&lt;li&gt;既然是github的东西自然少不了版本控制.&lt;/li&gt;
&lt;li&gt;静态页面加载速度快.&lt;/li&gt;
&lt;li&gt;使用markdown语法, 直接用Vim写出统一风格的漂亮博文.&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;坏处&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;静态页面, 部分交互功能实现起来比较麻烦.&lt;/li&gt;
&lt;li&gt;markdown乱解析问题.&lt;/li&gt;
&lt;li&gt;GFW有时要使坏.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;hello kitty(就是不用 hello world)&lt;/h3&gt;

&lt;p&gt;首先得去github上建立一个名为{username}.github.io的项目, 并在本地pull到项目, 写一个hello kitty到index.html, 第一次push上去后, 需要等一个大便的时间, 才可以用{username}.github.io来访问到页面. 域名解析在根目录中建立一个名为CNAME的文件, 文件里填写域名就可以了, 修改这个文件后, 要用域名访问博客, 也需要等上一个大便的时间.&lt;/p&gt;

&lt;p&gt;好了, 既然现在页面已经能正常访问. 就可以放上任意的静态东西了.&lt;/p&gt;

&lt;h3&gt;jekyll&lt;/h3&gt;

&lt;p&gt;现在可以直接通过手写html来搭建博客, 不过这工作量太大, 现在就是jekyll派上用场的时候了, 官方文档在&lt;a href=&quot;http://jekyllrb.com/docs/home/&quot;&gt;这里&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;可以在本地配一个jekyll, 测试比较方便, 如果不想搭配本地环境, 可以直接将代码推到github上来浏览页面.&lt;/p&gt;

&lt;p&gt;本地可以直接查看文档, 用&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo jekyll dosc&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;运行完毕后在浏览器输入localhost:4000就能看到跟官方网站一模一样的东西了.&lt;/p&gt;

&lt;h4&gt;安装&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo apt-get install rubygems&lt;/p&gt;

&lt;p&gt;gem install jekyll&lt;/p&gt;

&lt;p&gt;jekyll new myblog&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;gem是ruby提供的包管理工具.
jekyll new 实现自动创建一些目录, 现在cd到myblog就可以看见jekyll自动帮我们生成的文件结构了.&lt;/p&gt;

&lt;p&gt;windows用户可以参考&lt;a href=&quot;http://www.madhur.co.in/blog/2011/09/01/runningjekyllwindows.html&quot;&gt;这篇文章&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;front-matter&lt;/h3&gt;

&lt;p&gt;每个文件在开始出可以有一些头部信息, 格式如下:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#this is configure&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里可以制定该文件的一些属性 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;layout&lt;/strong&gt;: 指定该页面用哪个模板.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;title&lt;/strong&gt;: 文章的标题.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;category&lt;/strong&gt;: 文章分类.&lt;/p&gt;

&lt;h4&gt;目录结构&lt;/h4&gt;

&lt;p&gt;所有特殊的目录都是以下划线开头.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;_config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个是文件, 里面放存放配置信息, 常用配置如下&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;destination&lt;/strong&gt;: 这里配置jekyll将编译好的网站放到的地方, 默认放入build&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;safe&lt;/strong&gt;: 是否允许插件.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;server_port&lt;/strong&gt;: jekyll服务的端口, 如果4000被占用了就修改这个端口号.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;permalink&lt;/strong&gt;: 自定义url模板, 参考&lt;a href=&quot;http://jekyllrb.com/docs/permalinks/&quot;&gt;这篇&lt;/a&gt;文章.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pygments&lt;/strong&gt;: true则自动设置代码高亮.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;markdown&lt;/strong&gt;: 设置markdown的编译器, 比较重要, markdown不同编译器的编译的结果可能有些不同, 并且有些对中文支持不够, 这里建议设置为 redcarpet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;paginate&lt;/strong&gt;: 设置每一页显示的item数量, 配合paginate_path使用, 有关分页的说明参考&lt;a href=&quot;http://jekyllrb.com/docs/pagination/&quot;&gt;这里&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;常用大概就这么多了, 具体看自己的需求, 全部配置信息可以从&lt;a href=&quot;http://jekyllrb.com/docs/configuration/&quot;&gt;这里&lt;/a&gt;获得.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;_layout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是文件夹, _layout文件夹存放html文件.&lt;/p&gt;

&lt;p&gt;layout中是放模板的地方, 每个页面可以制定其模板, 指定了以后, 页面就会自动被layout填充. 编译后的页面, 会将layout引进过来, 页面本身的内容写在layout文件中 **** 的地方.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;_include&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是文件夹, _include文件夹存放html文件.&lt;/p&gt;

&lt;p&gt;include中存放一些常用的html文件, 如头部和脚步. 这个在大多的模板引擎中已经见惯了, 这里就不细谈了. 可以在任意文件中将 include 中的文件夹中的文件通过 &lt;strong&gt;{ % include footer.html % }&lt;/strong&gt; 引用进来.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;_posts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是文件夹, _posts文件夹存放markdown文件.&lt;/p&gt;

&lt;p&gt;posts中就是存放博文的地方了, 文件名格式是 &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;YYYY-mm-dd-your-blog-title.markdown &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;比如本篇文章对应的post文件名是&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2013-09-29-how-to-build-git.markdown&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;博文使用markdown语法书写, &lt;a href=&quot;http://wowubuntu.com/markdown/&quot;&gt;这里&lt;/a&gt;是markdown教程.&lt;/p&gt;

&lt;h3&gt;部署&lt;/h3&gt;

&lt;p&gt;jekyll的部署很简单, 在本地的话直接执行&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;jekyll build&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后在build文件夹中, 可以看到生成的网站代码了. 然后用&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;jekyll serve --detach&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;jekyll serve表示开启服务, 默认4000端口, --detach表示后台运行. 现在访问localhost:4000就可以看到博客了.&lt;/p&gt;

&lt;p&gt;在github上部署, 直接将&lt;strong&gt;项目&lt;/strong&gt;根目录(注意这里不需要将build目录加进去), push到{username}.github.io就可以了.&lt;/p&gt;

&lt;p&gt;github会自动识别这是一个jekyll项目并进行parse&lt;/p&gt;

&lt;h3&gt;分类&lt;/h3&gt;

&lt;p&gt;下回分解&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>搭一个VPN服务器需要些什么</title>
   <link href="http://wulfovitch.net/2013/09/vpn-setup/"/>
   <updated>2013-09-26T19:27:33+08:00</updated>
   <id>http://wulfovitch.net/2013/09/vpn-setup</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文主要细谈搭建VPN服务器（包括测试）需要用到的知识点，不会详细说明VPN的配置&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;安装&lt;/h3&gt;

&lt;p&gt;要搭配一个PPTPD VPN，需要安装以下软件包：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ppp&lt;/li&gt;
&lt;li&gt;pptpd&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;他们是用来做什么的不清楚，从包信息上看ppp是point to pint协议守护进程，PPTPD才是VPN的守护进程&lt;/p&gt;

&lt;p&gt;安装pptpd yum源没有，在网上下载rpm包手动安装，下面说明RPM命令的使用方法：&lt;/p&gt;

&lt;h4&gt;rpm&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;-q --query 查询包信息&lt;/li&gt;
&lt;li&gt;-i --install 安装包&lt;/li&gt;
&lt;li&gt;-u --upgrade 升级包&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是一些常用的组合命令&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;rpm -ivh i表示安装包，vh组合打印安装进度，可以直接跟http或ftp协议&lt;/p&gt;

&lt;p&gt;rpm -ivh -replacepkgs 替换原有的相同包&lt;/p&gt;

&lt;p&gt;rpm -qa q表示查看包，a表示查看所有安装的包&lt;/p&gt;

&lt;p&gt;rpm -qpl p provides 查看包提供些什么，l list 列出包中的文件 pl可以查看包会在系统中安装哪些东西&lt;/p&gt;

&lt;p&gt;rpm -qpi i information 查看包的信息&lt;/p&gt;

&lt;p&gt;rpm -qf f file 查看某个文件属于哪个包&lt;/p&gt;

&lt;p&gt;which python | xargs rpm -qf 查看可执行文件python属于哪个包&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;起服务&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;/etc/init.d/pptpd start&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后用chkconfig设置开机自动启动&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;chkconfig pptpd on&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;chkconfig&lt;/h4&gt;

&lt;p&gt;chkconfig 管理linux各个服务在系统以什么样的方式运行时的状态，大多数情况下都是用来设置开机自动启动&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;chkconfig pptpd off 关闭开机自动启动&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;nat转发&lt;/h3&gt;

&lt;p&gt;一切风平浪静的话，简单的配置一下/etc/pptpd.conf 和 /etc/ppp/options.pptpd 就可以连了，
但现实是冷酷残酷甚至桎梏的，连上VPN 只能算是可以和VPN服务器通信，现在还得让VPN服务器将
来源流量转发到eth0网卡上&lt;/p&gt;

&lt;h4&gt;iptables&lt;/h4&gt;

&lt;p&gt;iptables 就是防火墙，可以根据自定义的过滤规则设置哪些数据包接受哪些数据包丢弃，还可以设置流量转发&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这条命令修改nat表(-t)，增加一条规则(-A)，当流量流出时改变流量(POSTROUTING)，将来自192.168.0.0/255.255.255.0网段的流量(-s 192.168.0.0/24)
转发到eth0网卡上(-o eth0), 这里-s要根据ppp设置的网段来设置&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-t(table) 选择table&lt;/li&gt;
&lt;li&gt;-s(source) 指定来源&lt;/li&gt;
&lt;li&gt;-A(Append) 增加一条规则&lt;/li&gt;
&lt;li&gt;-o(out) 数据包发出的接口&lt;/li&gt;
&lt;li&gt;-p(protocol) 数据包协议&lt;/li&gt;
&lt;li&gt;-m(match?) 可以匹配一些状态信息&lt;/li&gt;
&lt;li&gt;-j(jump) 匹配到包后执行什么动作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;INPUT, FORWARD, POSTROUTING, OUTPUT等是chain(链), 指数据包正处的位置&lt;/p&gt;

&lt;p&gt;设置完iptables后, Linux需要开启内核流量转发&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;echo &amp;quot;1&amp;quot; &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;设置开机自动&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;vim /etc/sysctl.conf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;修改以下信息:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;net.ipv4.ip_forward = 0 #0为关闭，1为开启&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在如果一切正常的话，VPN应该就能正常使用了&lt;/p&gt;

&lt;h3&gt;错误处理&lt;/h3&gt;

&lt;h4&gt;日志&lt;/h4&gt;

&lt;p&gt;VPN 客户端或服务器每次连接都会写/var/log日志, 在/var/log中ls -l一下可以看出最近修改的文件, 查看最近修改的文件就可以知道VPN打的日志了&lt;/p&gt;

&lt;h4&gt;tcpdump&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;-i(interface) 设备&lt;/li&gt;
&lt;li&gt;port 端口&lt;/li&gt;
&lt;li&gt;host host&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个常规的dump&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;tcpdump -i lo port 80&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查看本地HTTPD处理的数据包&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;tcpdump -i eth0 port not 80&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查看eth0网卡发出的非http数据包&lt;/p&gt;

&lt;h3&gt;EOF&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>my first post1</title>
   <link href="http://wulfovitch.net/2013/09/wo-le-ge-cao/"/>
   <updated>2013-09-23T19:27:55+08:00</updated>
   <id>http://wulfovitch.net/2013/09/wo-le-ge-cao</id>
   <content type="html">&lt;p&gt;You&amp;#39;ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&amp;#39;s GitHub repo&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>是哪个apache进程处理了我的请求</title>
   <link href="http://wulfovitch.net/2013/09/which-httpd-handle-my-request/"/>
   <updated>2013-09-23T19:27:33+08:00</updated>
   <id>http://wulfovitch.net/2013/09/which-httpd-handle-my-request</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;当一个HTTP请求过来了，如何查看是哪个HTTPD在处理这个请求呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;p&gt;首先用&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;netstat -ntpea&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;查找监听80端口的进程并且状态为ESTABILISH的进程Inode&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;-t TCP&lt;/li&gt;
&lt;li&gt;-p Show the PID and name of the program to which each socket belongs.&lt;/li&gt;
&lt;li&gt;-e Display additional information.  Use this option twice for maximum detail.&lt;/li&gt;
&lt;li&gt;-a Show both listening and non-listening sockets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后在PID列就可以找到进程号了。&lt;/p&gt;

&lt;p&gt;如果出现无法显示PID的情况，可以给netstat 加-e参数打印进程的Inode值。&lt;/p&gt;

&lt;p&gt;Linux中进程也是文件，所以肯定就有Inode，这时去/proc/*/fd/中查找这个这个值，查找到后获取&lt;/p&gt;

&lt;p&gt;上级目录的进程号就可以了，查找命令如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo ls -l /proc/*/fd/ | grep -E &amp;quot;{$Inode}&amp;quot; -A10 -B10&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Welcome to Jekyll!</title>
   <link href="http://wulfovitch.net/2013/09/my-first-blog/"/>
   <updated>2013-09-23T19:27:33+08:00</updated>
   <id>http://wulfovitch.net/2013/09/my-first-blog</id>
   <content type="html">&lt;h1&gt;This is an H1&lt;/h1&gt;

&lt;h2&gt;This is an H2&lt;/h2&gt;

&lt;h1&gt;this is H1&lt;/h1&gt;

&lt;h2&gt;this is H2&lt;/h2&gt;

&lt;h3&gt;this is H3&lt;/h3&gt;

&lt;h4&gt;this is H4&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;这里是引用
  ，接着引用&lt;/p&gt;

&lt;p&gt;空一行后再起一个引用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  无序列表&lt;/li&gt;
&lt;li&gt;  无序列表&lt;/li&gt;
&lt;li&gt;&lt;p&gt;无序列表&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;中间有内容&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里是内容&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  再来点内容
这里是内容&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt; 有序列表&lt;/li&gt;
&lt;li&gt; 有序列表&lt;/li&gt;
&lt;li&gt; 有序列表&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;强调区域&lt;strong&gt;这里就是强调区域了&lt;/strong&gt;，我了个擦的Vim还支持markdown的高亮&lt;/p&gt;

&lt;h2&gt;down here is a line&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hahahaha&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__constrcut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Welcome to Jekyll!</title>
   <link href="http://wulfovitch.net/2013/09/welcome-to-jekyll/"/>
   <updated>2013-09-23T00:00:00+08:00</updated>
   <id>http://wulfovitch.net/2013/09/welcome-to-jekyll</id>
   <content type="html">&lt;p&gt;You&amp;#39;ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&amp;#39;s GitHub repo&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>